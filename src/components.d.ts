/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ColorEvent } from "./components/color-pickcat/color-pickcat";
import { AlphaEvent } from "./components/cpc-alpha-control/cpc-alpha-control";
import { AlphaEvent as AlphaEvent1 } from "./components/cpc-alpha-control/cpc-alpha-control";
import { Position, SelectedColorDetail } from "./components/cpc-color-area/cpc-color-area";
import { HueEvent } from "./components/cpc-hue-control/cpc-hue-control";
import { AlphaValueEvent } from "./components/cpc-input-alpha/cpc-input-alpha";
import { InputEvent } from "./components/cpc-input-v1/cpc-input-v1";
import { InputEvent as InputEvent1 } from "./components/cpc-input-v1/cpc-input-v1";
import { CpcMenuV1Hover, CpcMenuV1Item, CpcMenuV1Props } from "./components/cpc-menu-v1/cpc-menu-v1";
export namespace Components {
    interface ColorPickcat {
        "colorArea"?: string;
        "colorMarker"?: string;
    }
    interface CpcAlphaControl {
        "alpha"?: number;
        "color"?: string;
    }
    interface CpcButtonV3 {
    }
    interface CpcColorArea {
        "alphaValue": number;
        "colorArea"?: string;
        "colorMarker"?: string;
        "handlerPos"?: Position;
        "handlerRadius"?: number;
    }
    interface CpcContainerV3 {
        "active"?: boolean;
    }
    interface CpcDivisorV1 {
    }
    interface CpcEyeDropper {
    }
    interface CpcHueControl {
        "value"?: number;
    }
    interface CpcInputAlpha {
        "value": number;
    }
    interface CpcInputColor {
        "colors": string[];
        "value": string;
    }
    interface CpcInputNumberV2 {
        "label"?: string;
        "value"?: number | string;
    }
    interface CpcInputV1 {
        "placeholder"?: string;
        "selection": boolean;
        "value"?: number | string;
    }
    interface CpcMenuV1 {
        "data"?: CpcMenuV1Props[];
        "openMenu": boolean;
    }
    interface CpcPopupV1 {
    }
}
export interface ColorPickcatCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLColorPickcatElement;
}
export interface CpcAlphaControlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpcAlphaControlElement;
}
export interface CpcColorAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpcColorAreaElement;
}
export interface CpcContainerV3CustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpcContainerV3Element;
}
export interface CpcEyeDropperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpcEyeDropperElement;
}
export interface CpcHueControlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpcHueControlElement;
}
export interface CpcInputAlphaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpcInputAlphaElement;
}
export interface CpcInputColorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpcInputColorElement;
}
export interface CpcInputNumberV2CustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpcInputNumberV2Element;
}
export interface CpcInputV1CustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpcInputV1Element;
}
export interface CpcMenuV1CustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpcMenuV1Element;
}
declare global {
    interface HTMLColorPickcatElement extends Components.ColorPickcat, HTMLStencilElement {
    }
    var HTMLColorPickcatElement: {
        prototype: HTMLColorPickcatElement;
        new (): HTMLColorPickcatElement;
    };
    interface HTMLCpcAlphaControlElement extends Components.CpcAlphaControl, HTMLStencilElement {
    }
    var HTMLCpcAlphaControlElement: {
        prototype: HTMLCpcAlphaControlElement;
        new (): HTMLCpcAlphaControlElement;
    };
    interface HTMLCpcButtonV3Element extends Components.CpcButtonV3, HTMLStencilElement {
    }
    var HTMLCpcButtonV3Element: {
        prototype: HTMLCpcButtonV3Element;
        new (): HTMLCpcButtonV3Element;
    };
    interface HTMLCpcColorAreaElement extends Components.CpcColorArea, HTMLStencilElement {
    }
    var HTMLCpcColorAreaElement: {
        prototype: HTMLCpcColorAreaElement;
        new (): HTMLCpcColorAreaElement;
    };
    interface HTMLCpcContainerV3Element extends Components.CpcContainerV3, HTMLStencilElement {
    }
    var HTMLCpcContainerV3Element: {
        prototype: HTMLCpcContainerV3Element;
        new (): HTMLCpcContainerV3Element;
    };
    interface HTMLCpcDivisorV1Element extends Components.CpcDivisorV1, HTMLStencilElement {
    }
    var HTMLCpcDivisorV1Element: {
        prototype: HTMLCpcDivisorV1Element;
        new (): HTMLCpcDivisorV1Element;
    };
    interface HTMLCpcEyeDropperElement extends Components.CpcEyeDropper, HTMLStencilElement {
    }
    var HTMLCpcEyeDropperElement: {
        prototype: HTMLCpcEyeDropperElement;
        new (): HTMLCpcEyeDropperElement;
    };
    interface HTMLCpcHueControlElement extends Components.CpcHueControl, HTMLStencilElement {
    }
    var HTMLCpcHueControlElement: {
        prototype: HTMLCpcHueControlElement;
        new (): HTMLCpcHueControlElement;
    };
    interface HTMLCpcInputAlphaElement extends Components.CpcInputAlpha, HTMLStencilElement {
    }
    var HTMLCpcInputAlphaElement: {
        prototype: HTMLCpcInputAlphaElement;
        new (): HTMLCpcInputAlphaElement;
    };
    interface HTMLCpcInputColorElement extends Components.CpcInputColor, HTMLStencilElement {
    }
    var HTMLCpcInputColorElement: {
        prototype: HTMLCpcInputColorElement;
        new (): HTMLCpcInputColorElement;
    };
    interface HTMLCpcInputNumberV2Element extends Components.CpcInputNumberV2, HTMLStencilElement {
    }
    var HTMLCpcInputNumberV2Element: {
        prototype: HTMLCpcInputNumberV2Element;
        new (): HTMLCpcInputNumberV2Element;
    };
    interface HTMLCpcInputV1Element extends Components.CpcInputV1, HTMLStencilElement {
    }
    var HTMLCpcInputV1Element: {
        prototype: HTMLCpcInputV1Element;
        new (): HTMLCpcInputV1Element;
    };
    interface HTMLCpcMenuV1Element extends Components.CpcMenuV1, HTMLStencilElement {
    }
    var HTMLCpcMenuV1Element: {
        prototype: HTMLCpcMenuV1Element;
        new (): HTMLCpcMenuV1Element;
    };
    interface HTMLCpcPopupV1Element extends Components.CpcPopupV1, HTMLStencilElement {
    }
    var HTMLCpcPopupV1Element: {
        prototype: HTMLCpcPopupV1Element;
        new (): HTMLCpcPopupV1Element;
    };
    interface HTMLElementTagNameMap {
        "color-pickcat": HTMLColorPickcatElement;
        "cpc-alpha-control": HTMLCpcAlphaControlElement;
        "cpc-button-v3": HTMLCpcButtonV3Element;
        "cpc-color-area": HTMLCpcColorAreaElement;
        "cpc-container-v3": HTMLCpcContainerV3Element;
        "cpc-divisor-v1": HTMLCpcDivisorV1Element;
        "cpc-eye-dropper": HTMLCpcEyeDropperElement;
        "cpc-hue-control": HTMLCpcHueControlElement;
        "cpc-input-alpha": HTMLCpcInputAlphaElement;
        "cpc-input-color": HTMLCpcInputColorElement;
        "cpc-input-number-v2": HTMLCpcInputNumberV2Element;
        "cpc-input-v1": HTMLCpcInputV1Element;
        "cpc-menu-v1": HTMLCpcMenuV1Element;
        "cpc-popup-v1": HTMLCpcPopupV1Element;
    }
}
declare namespace LocalJSX {
    interface ColorPickcat {
        "colorArea"?: string;
        "colorMarker"?: string;
        "onAlpha"?: (event: ColorPickcatCustomEvent<AlphaEvent>) => void;
        "onColor"?: (event: ColorPickcatCustomEvent<ColorEvent>) => void;
    }
    interface CpcAlphaControl {
        "alpha"?: number;
        "color"?: string;
        "onAlphaValue"?: (event: CpcAlphaControlCustomEvent<AlphaEvent>) => void;
    }
    interface CpcButtonV3 {
    }
    interface CpcColorArea {
        "alphaValue"?: number;
        "colorArea"?: string;
        "colorMarker"?: string;
        "handlerPos"?: Position;
        "handlerRadius"?: number;
        "onLoadedComponent"?: (event: CpcColorAreaCustomEvent<{ selectedColorDetail: SelectedColorDetail }>) => void;
        "onSelectedColor"?: (event: CpcColorAreaCustomEvent<SelectedColorDetail>) => void;
    }
    interface CpcContainerV3 {
        "active"?: boolean;
        "onRestoreState"?: (event: CpcContainerV3CustomEvent<{ state: boolean }>) => void;
    }
    interface CpcDivisorV1 {
    }
    interface CpcEyeDropper {
        "onCloseEyeDropper"?: (event: CpcEyeDropperCustomEvent<{ state: boolean }>) => void;
        "onGetColor"?: (event: CpcEyeDropperCustomEvent<{ sRGBHex: string }>) => void;
        "onOpenEyeDropper"?: (event: CpcEyeDropperCustomEvent<{ state: boolean }>) => void;
    }
    interface CpcHueControl {
        "onHueValue"?: (event: CpcHueControlCustomEvent<HueEvent>) => void;
        "value"?: number;
    }
    interface CpcInputAlpha {
        "onAlphaValue"?: (event: CpcInputAlphaCustomEvent<AlphaValueEvent>) => void;
        "onInputAlphaChange"?: (event: CpcInputAlphaCustomEvent<InputEvent>) => void;
        "value"?: number;
    }
    interface CpcInputColor {
        "colors"?: string[];
        "onInputChange"?: (event: CpcInputColorCustomEvent<InputEvent>) => void;
        "onSelectedColor"?: (event: CpcInputColorCustomEvent<{ currentColor: string }>) => void;
        "value"?: string;
    }
    interface CpcInputNumberV2 {
        "label"?: string;
        "onCleanSelection"?: (event: CpcInputNumberV2CustomEvent<InputEvent>) => void;
        "onDecrement"?: (event: CpcInputNumberV2CustomEvent<{ value: number }>) => void;
        "onIncrement"?: (event: CpcInputNumberV2CustomEvent<{ value: number }>) => void;
        "onInputChange"?: (event: CpcInputNumberV2CustomEvent<InputEvent>) => void;
        "value"?: number | string;
    }
    interface CpcInputV1 {
        "onInputChange"?: (event: CpcInputV1CustomEvent<InputEvent>) => void;
        "onInputCleanSelection"?: (event: CpcInputV1CustomEvent<InputEvent>) => void;
        "onInputSelection"?: (event: CpcInputV1CustomEvent<InputEvent>) => void;
        "placeholder"?: string;
        "selection"?: boolean;
        "value"?: number | string;
    }
    interface CpcMenuV1 {
        "data"?: CpcMenuV1Props[];
        "onHover"?: (event: CpcMenuV1CustomEvent<CpcMenuV1Hover>) => void;
        "onItem"?: (event: CpcMenuV1CustomEvent<CpcMenuV1Item>) => void;
        "openMenu"?: boolean;
    }
    interface CpcPopupV1 {
    }
    interface IntrinsicElements {
        "color-pickcat": ColorPickcat;
        "cpc-alpha-control": CpcAlphaControl;
        "cpc-button-v3": CpcButtonV3;
        "cpc-color-area": CpcColorArea;
        "cpc-container-v3": CpcContainerV3;
        "cpc-divisor-v1": CpcDivisorV1;
        "cpc-eye-dropper": CpcEyeDropper;
        "cpc-hue-control": CpcHueControl;
        "cpc-input-alpha": CpcInputAlpha;
        "cpc-input-color": CpcInputColor;
        "cpc-input-number-v2": CpcInputNumberV2;
        "cpc-input-v1": CpcInputV1;
        "cpc-menu-v1": CpcMenuV1;
        "cpc-popup-v1": CpcPopupV1;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "color-pickcat": LocalJSX.ColorPickcat & JSXBase.HTMLAttributes<HTMLColorPickcatElement>;
            "cpc-alpha-control": LocalJSX.CpcAlphaControl & JSXBase.HTMLAttributes<HTMLCpcAlphaControlElement>;
            "cpc-button-v3": LocalJSX.CpcButtonV3 & JSXBase.HTMLAttributes<HTMLCpcButtonV3Element>;
            "cpc-color-area": LocalJSX.CpcColorArea & JSXBase.HTMLAttributes<HTMLCpcColorAreaElement>;
            "cpc-container-v3": LocalJSX.CpcContainerV3 & JSXBase.HTMLAttributes<HTMLCpcContainerV3Element>;
            "cpc-divisor-v1": LocalJSX.CpcDivisorV1 & JSXBase.HTMLAttributes<HTMLCpcDivisorV1Element>;
            "cpc-eye-dropper": LocalJSX.CpcEyeDropper & JSXBase.HTMLAttributes<HTMLCpcEyeDropperElement>;
            "cpc-hue-control": LocalJSX.CpcHueControl & JSXBase.HTMLAttributes<HTMLCpcHueControlElement>;
            "cpc-input-alpha": LocalJSX.CpcInputAlpha & JSXBase.HTMLAttributes<HTMLCpcInputAlphaElement>;
            "cpc-input-color": LocalJSX.CpcInputColor & JSXBase.HTMLAttributes<HTMLCpcInputColorElement>;
            "cpc-input-number-v2": LocalJSX.CpcInputNumberV2 & JSXBase.HTMLAttributes<HTMLCpcInputNumberV2Element>;
            "cpc-input-v1": LocalJSX.CpcInputV1 & JSXBase.HTMLAttributes<HTMLCpcInputV1Element>;
            "cpc-menu-v1": LocalJSX.CpcMenuV1 & JSXBase.HTMLAttributes<HTMLCpcMenuV1Element>;
            "cpc-popup-v1": LocalJSX.CpcPopupV1 & JSXBase.HTMLAttributes<HTMLCpcPopupV1Element>;
        }
    }
}
